// +build simulation

// Code generated by MockGen. DO NOT EDIT.
// Source: rsync.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRsyncUploader is a mock of RsyncUploader interface
type MockRsyncUploader struct {
	ctrl     *gomock.Controller
	recorder *MockRsyncUploaderMockRecorder
}

// MockRsyncUploaderMockRecorder is the mock recorder for MockRsyncUploader
type MockRsyncUploaderMockRecorder struct {
	mock *MockRsyncUploader
}

// NewMockRsyncUploader creates a new mock instance
func NewMockRsyncUploader(ctrl *gomock.Controller) *MockRsyncUploader {
	mock := &MockRsyncUploader{ctrl: ctrl}
	mock.recorder = &MockRsyncUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRsyncUploader) EXPECT() *MockRsyncUploaderMockRecorder {
	return m.recorder
}

// Upload mocks base method
func (m *MockRsyncUploader) Upload(cmd Cmd) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", cmd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload
func (mr *MockRsyncUploaderMockRecorder) Upload(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockRsyncUploader)(nil).Upload), cmd)
}
